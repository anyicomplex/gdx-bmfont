allprojects {
    apply plugin: 'java-library'
    group 'io.github.anyicomplex'
    version '1.0.5'
    sourceCompatibility = 1.8
    repositories {
        mavenCentral()
    }
    ext {
        gdxVersion = '1.10.0'
        picocliVersion = '4.6.2'
    }
    dependencies {
        implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }
    test {
        useJUnitPlatform()
    }
}

jar {
    archiveBaseName.set("core")
}

subprojects {
    dependencies {
        implementation project(":")
    }
}

project(":lwjgl3") {
    apply plugin: 'application'
    mainClassName = 'com.anyicomplex.gdx.tools.bmfont.GdxBMFont'
    dependencies {
        implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

        implementation "info.picocli:picocli:$picocliVersion"
        annotationProcessor "info.picocli:picocli-codegen:$picocliVersion"
    }
    jar {
        archiveBaseName.set(rootProject.name)
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        dependsOn configurations.runtimeClasspath
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
        dependencies {
            exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
        }
        manifest {
            attributes 'Main-Class': project.mainClassName
        }
        doLast {
            file(archiveFile).setExecutable(true, false)
        }
    }
    run {
        dependsOn(jar)
        classpath = files('build/libs/' + rootProject.name + '-' + project.version + '.jar')
        setIgnoreExitValue(true)
        def os = System.properties['os.name'].toLowerCase()
        if (os.contains('mac')) {
            // Required to run LWJGL3 Java apps on MacOS
            jvmArgs += '-XstartOnFirstThread'
        }
        args += '--help'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            groupId = project.group
            version = project.version
            from components.java
            pom {
                name = 'Gdx BitmapFont Packer'
                description = 'BitmapFont packer library based on libGDX\'s FreeType wrapper.'
                url = 'https://github.com/anyicomplex/gdx-bmfont'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'anyicomplex'
                        name = 'Yi An'
                        email = 'anyicomplex@protonmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/anyicomplex/gdx-bmfont.git'
                    developerConnection = 'scm:git:git@github.com:anyicomplex/gdx-bmfont.git'
                    url = 'https://github.com/anyicomplex/gdx-bmfont/tree/main'
                }
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            }
        }
    }
}

signing {
    def key = System.getenv("SIGNING_KEY")
    def password = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(key, password)
    sign publishing.publications.mavenJava
}